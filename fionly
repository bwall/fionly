#!/usr/bin/env python2
from sys import stdin
from hashlib import sha256
from tempfile import SpooledTemporaryFile
import random

max_buffer_size = 1024 * 1024 * 64
salt = ''.join(chr(random.randint(0, 255)) for _ in range(32))


def is_first(data, temp_file):
    global salt
    m = sha256()
    m.update(data.rstrip())
    m.update(salt)
    hash = m.hexdigest()

    temp_file.seek(0)
    for line in temp_file:
        if line.rstrip() == hash:
            return False

    temp_file.seek(0, 2)
    temp_file.write(hash + "\r\n")
    return True


def get_firsts_for_file_handle(fh, temp_file):
    for l in fh:
        l = l.rstrip()
        if is_first(l, temp_file):
            yield l


def get_version():
    return "1.0.0"


if __name__ == "__main__":
    from argparse import ArgumentParser

    parser = ArgumentParser(
        prog=__file__,
        description="Prints out the first unique instance of a line",
        version="%(prog)s v" + get_version() + " by Brian Wallace (@botnet_hunter)",
        epilog="%(prog)s v" + get_version() + " by Brian Wallace (@botnet_hunter)"
    )
    parser.add_argument('path', metavar='path', type=str, nargs='?', default="-",
                        help="Paths to files to scan (if not supplied, stdin is the file being read)")

    args = parser.parse_args()

    with SpooledTemporaryFile(max_size=max_buffer_size) as temp:
        if args.path == "-":
            with stdin as fh:
                for line in get_firsts_for_file_handle(fh, temp):
                    print line
        else:
            with open(args.path, 'r') as fh:
                for line in get_firsts_for_file_handle(fh, temp):
                    print line